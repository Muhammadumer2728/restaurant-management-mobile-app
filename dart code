import 'package:flutter/material.dart';

void main() {
  runApp( RestaurantApp());
}
class RestaurantApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Restaurant App', 
      home: TableScreen(),
    );
  }
}
class RestaurantTable {
  final int id;
  final int seats;
  bool isOccupied;
  Map<String, int> order = {};

  RestaurantTable({required this.id, required this.seats, this.isOccupied = false});
}

class TableScreen extends StatefulWidget {
  @override
  _TableScreenState createState() {
   return _TableScreenState();
    }
}
class _TableScreenState extends State {
  List<RestaurantTable> tables = List.generate(9,(index) {
  return RestaurantTable(id: index + 1, seats: (index % 4) + 2);
});

  void resetTable(RestaurantTable table) {
    setState(() {
      table.isOccupied = false;
      table.order.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Tables Overview', style: TextStyle(fontSize: 14))),
      body: GridView.builder(
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 3,
          crossAxisSpacing: 4,
          mainAxisSpacing: 4,
          childAspectRatio: 0.5,
        ),
        padding: const EdgeInsets.all(8.0),
        itemCount: 9,
        itemBuilder: (BuildContext context, int index) {
          final RestaurantTable table = tables[index];
          double totalBill = table.order.entries.fold(0, (sum, entry) {
            return sum + (menuItems[entry.key]! * entry.value);
          });

          return Card(
            color: table.isOccupied ? Colors.red[100] : Colors.green[100],
            child: Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text('Table ${table.id}', style:  TextStyle(fontSize: 12)),
                  Text('Seats: ${table.seats}', style: TextStyle(fontSize: 12)),
                  Text(table.isOccupied ? 'Occupied' : 'Available',style: TextStyle(fontSize: 12),),
                  if (table.isOccupied)
                    Text(
                      'Bill: \$${totalBill.toStringAsFixed(2)}',
                      style:TextStyle(fontSize: 12, fontWeight: FontWeight.bold), ),
                  ElevatedButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) {
                            return OrderScreen(
                            table: table,
                            onOrderComplete: () {
                              setState(() {
                                table.isOccupied = true;
                              });
                            },
                            onBillComplete: () {
                              resetTable(table);
                            },
                          );
                     } ),
                      );
                    },
                    child: Text(
                      'Order',
                      style: TextStyle(fontSize: 12),
                    ),
                  ),
                  if (table.isOccupied)
                    ElevatedButton(
                      onPressed: () => resetTable(table),
                      child: const Text('Reset', style: TextStyle(fontSize: 12)),
                    ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}

final Map<String, double> menuItems = {
  'Burger': 5.99,
  'Pizza': 8.99,
  'Pasta': 7.99,
  'Salad': 4.99,
  'Cocktail': 7.99,
  'Iced Tea': 2.99,
  'Lemonade': 3.49,
  'Fries': 3.99,
  'Soup': 4.49,
};

class OrderScreen extends StatefulWidget {
RestaurantTable table;
 VoidCallback onOrderComplete;
 VoidCallback onBillComplete;

  OrderScreen({
    required this.table,
    required this.onOrderComplete,
    required this.onBillComplete,
  });

  @override
  _OrderScreenState createState() {
    return _OrderScreenState();}
}

class _OrderScreenState extends State<OrderScreen> {
  void addItem(String item) {
    setState(() {
      widget.table.order[item] = (widget.table.order[item] ?? 0) + 1;
    });
  }

  void removeItem(String item) {
    setState(() {
      if (widget.table.order[item] != null && widget.table.order[item]! > 1) {
        widget.table.order[item] = widget.table.order[item]! - 1;
      } else {
        widget.table.order.remove(item);
      }
    });
  }

  double calculateTotal() {
    double total = 0;
    widget.table.order.forEach((item, quantity) {
      total += (menuItems[item]! * quantity);
    });
    return total;
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Table ${widget.table.id} Order',
          style:  TextStyle(fontSize: 14),
        ),
      ),
      body: Stack(
        children: [
          Padding(
            padding: EdgeInsets.only(bottom: 80.0),
            child: GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 1,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                childAspectRatio: 2.5,
              ),
              padding:  EdgeInsets.all(8.0),
              itemCount: 9,
              itemBuilder: (context, index) {
                final itemName = menuItems.keys.elementAt(index);
                return Card(
                  child: ListTile(
                    title: Text(
                      itemName,
                      style: const TextStyle(fontSize: 12),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    subtitle: Text(
                      '\$${menuItems[itemName]!.toStringAsFixed(2)}',
                      style: const TextStyle(fontSize: 10),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: const Icon(Icons.remove, size: 16),
                          onPressed: () {removeItem(itemName);}
                        ),
                        IconButton(
                          icon: const Icon(Icons.add, size: 16),
                          onPressed: () {addItem(itemName);}
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
          Positioned(
            bottom: 10,
            left: 10,
            child: ElevatedButton(
              onPressed: () {
                widget.onOrderComplete();
                Navigator.pop(context);
              },
              child: const Text('Save & Go Back'),
            ),
          ),
          Positioned(
            bottom: 10,
            right: 10,
            child: ElevatedButton(
              onPressed: () {
                if (widget.table.order.isEmpty) {
                  showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                      title: const Text('Error'),
                      content: const Text('No items selected to generate a bill.'),
                      actions: [
                        TextButton(
                          onPressed: () => Navigator.pop(context),
                          child: const Text('OK'),
                        ),
                      ],
                    ),
                  );
                } else {
                  showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                      title: const Text('Bill'),
                      content: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          ...widget.table.order.entries.map((entry) {
                            String item = entry.key;
                            int quantity = entry.value;
                            double itemPrice = menuItems[item]!;
                            return ListTile(
                              title: Text('$item x$quantity'),
                              subtitle: Text('\$${(itemPrice * quantity).toStringAsFixed(2)}'),
                            );
                          }),
                          SizedBox(height: 10),
                          Text(
                            'Total: \$${calculateTotal().toStringAsFixed(2)}',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                          ),
                        ],
                      ),
                      actions: [
                        TextButton(
                          onPressed: () {
                            widget.onBillComplete();
                            Navigator.pop(context);
                            Navigator.pop(context);
                          },
                          child: Text('Complete & Reset Table'),
                        ),
                      ],
                    ),
                  );
                }
              },
              child: Text('Generate Bill'),
            ),
          ),
        ],
      ),
    );
  }
}
